/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppLayoutImport } from './routes/app/_layout'

// Create Virtual Routes

const AppImport = createFileRoute('/app')()
const IndexLazyImport = createFileRoute('/')()
const AuthIndexLazyImport = createFileRoute('/auth/')()
const AuthVerifyLazyImport = createFileRoute('/auth/verify')()
const AppLayoutIndexLazyImport = createFileRoute('/app/_layout/')()
const AppLayoutPostLazyImport = createFileRoute('/app/_layout/post')()
const AppLayoutNotificationsLazyImport = createFileRoute(
  '/app/_layout/notifications',
)()
const AppLayoutHistoryLazyImport = createFileRoute('/app/_layout/history')()
const AppLayoutProfileIndexLazyImport = createFileRoute(
  '/app/_layout/profile/',
)()
const AppLayoutProfileSetupLazyImport = createFileRoute(
  '/app/_layout/profile/setup',
)()

// Create/Update Routes

const AppRoute = AppImport.update({
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const AuthVerifyLazyRoute = AuthVerifyLazyImport.update({
  path: '/auth/verify',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/verify.lazy').then((d) => d.Route))

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)

const AppLayoutIndexLazyRoute = AppLayoutIndexLazyImport.update({
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any).lazy(() =>
  import('./routes/app/_layout/index.lazy').then((d) => d.Route),
)

const AppLayoutPostLazyRoute = AppLayoutPostLazyImport.update({
  path: '/post',
  getParentRoute: () => AppLayoutRoute,
} as any).lazy(() =>
  import('./routes/app/_layout/post.lazy').then((d) => d.Route),
)

const AppLayoutNotificationsLazyRoute = AppLayoutNotificationsLazyImport.update(
  {
    path: '/notifications',
    getParentRoute: () => AppLayoutRoute,
  } as any,
).lazy(() =>
  import('./routes/app/_layout/notifications.lazy').then((d) => d.Route),
)

const AppLayoutHistoryLazyRoute = AppLayoutHistoryLazyImport.update({
  path: '/history',
  getParentRoute: () => AppLayoutRoute,
} as any).lazy(() =>
  import('./routes/app/_layout/history.lazy').then((d) => d.Route),
)

const AppLayoutProfileIndexLazyRoute = AppLayoutProfileIndexLazyImport.update({
  path: '/profile/',
  getParentRoute: () => AppLayoutRoute,
} as any).lazy(() =>
  import('./routes/app/_layout/profile/index.lazy').then((d) => d.Route),
)

const AppLayoutProfileSetupLazyRoute = AppLayoutProfileSetupLazyImport.update({
  path: '/profile/setup',
  getParentRoute: () => AppLayoutRoute,
} as any).lazy(() =>
  import('./routes/app/_layout/profile/setup.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/_layout': {
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof AppRoute
    }
    '/auth/verify': {
      preLoaderRoute: typeof AuthVerifyLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/_layout/history': {
      preLoaderRoute: typeof AppLayoutHistoryLazyImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/notifications': {
      preLoaderRoute: typeof AppLayoutNotificationsLazyImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/post': {
      preLoaderRoute: typeof AppLayoutPostLazyImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/': {
      preLoaderRoute: typeof AppLayoutIndexLazyImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/profile/setup': {
      preLoaderRoute: typeof AppLayoutProfileSetupLazyImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/profile/': {
      preLoaderRoute: typeof AppLayoutProfileIndexLazyImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AppRoute.addChildren([
    AppLayoutRoute.addChildren([
      AppLayoutHistoryLazyRoute,
      AppLayoutNotificationsLazyRoute,
      AppLayoutPostLazyRoute,
      AppLayoutIndexLazyRoute,
      AppLayoutProfileSetupLazyRoute,
      AppLayoutProfileIndexLazyRoute,
    ]),
  ]),
  AuthVerifyLazyRoute,
  AuthIndexLazyRoute,
])

/* prettier-ignore-end */
